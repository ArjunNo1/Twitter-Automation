# -*- coding: utf-8 -*-
"""Untitled.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kumcJc6ssSbEbosL9MHmC5G9f1q4Ed4K
"""

from cgitb import text
import os,sys,re
import pandas as pd
import numpy as np
from selenium import webdriver
from selenium.common.exceptions import TimeoutException

from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait 
from selenium.webdriver.support import expected_conditions as EC
import time
import pandas as pd
from collections import defaultdict
from django.core.management.base import BaseCommand
from urllib.request import urlopen
from bs4 import BeautifulSoup
import json
from scraping.models import Post



class Command(BaseCommand):
    help = "collect jobs"
    # define logic of command

    def DriverWait(self,driver,link):
        driver.get(link)
        timeout = 5
        try:
            element_present = EC.presence_of_element_located((By.CLASS_NAME, 'dummy'))
            WebDriverWait(driver, timeout).until(element_present)
        except TimeoutException:
            #print(link,"Not found")
            pass
        
    def driver_scroll(self,driver):
        lenOfPage = driver.execute_script("window.scrollTo(0, document.body.scrollHeight);var lenOfPage=document.body.scrollHeight;return lenOfPage;")
        match=False
        while(match==False):
            lastCount = lenOfPage
            time.sleep(5)
            lenOfPage = driver.execute_script("window.scrollTo(0, document.body.scrollHeight);var lenOfPage=document.body.scrollHeight;return lenOfPage;")
            if lastCount==lenOfPage:
                match=True


    def handle(self, *args, **options):
        options = Options()
        options.add_argument("start-maximized")
        options.add_argument('log-level=3')
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        driver.get("https://www.google.com")

        self.DriverWait(driver,"https://www.linkedin.com/checkpoint/lg/login?trk=homepage-basic_google-one-tap-submit")
        driver.find_element('xpath','//input[@id = "username"]').send_keys("wavestensor@gmail.com")
        driver.find_element('xpath','//input[@id = "password"]').send_keys("Waves@1234")
        driver.find_element('xpath','//button[@aria-label = "Sign in"]').click()

        self.DriverWait(driver,"https://www.linkedin.com/search/results/all/?keywords=%23kpriet&origin=GLOBAL_SEARCH_HEADER&sid=Cm*")

        for i in driver.find_elements(By.TAG_NAME,"ul"):
            if i.get_attribute('class').count('social-details-social-counts')>0:
                print(i.text)
                break

        con=0
        l=[]
        for i in driver.find_elements(By.TAG_NAME,"div"):
            if i.get_attribute('class').count('entity-result__content-container')>0:
                # l.append(i.text)
                con+=1
                # print('\n')
                # print('\n')
                # print('\n')

        

        for i in driver.find_elements(By.TAG_NAME,"p"):
            try:
                if i.get_attribute('class').count('relative entity-result__content-summary--3-lines')>0:
                    print(i.text)
                    l.append(i.text)

            except:
                pass

        td = pd.DataFrame(l)
        td.head()

        def ppt(self,text):
            text = text.replace("...see more","")
            return text

        td['nt'] = td[0].apply(lambda text: ppt(self,text))
        print(td.head())

        t = td.iloc[0,1]


        l[1]

        td.to_csv("sam.csv")
        dict = { 'hi':l}

        dict


        self.stdout.write( 'scraping job complete' )

        for row in range(len(td)):
            row = td.iloc[row]
            Post.objects.create(
                    dateposted="2 days ago",
                    text=row[0],
                    likes= np.random.randint(20,120) )

        

        # print('%s added' % (dateposted,))
        # print('%s already exists' % (text,))
        
        
# time 1: kpriet_TemE641407